// Mocks generated by Mockito 5.4.6 from annotations
// in texterra/test/ui/screens/saved_pages_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:flutter/material.dart' as _i6;
import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:texterra/cubit/canvas_cubit.dart' as _i3;
import 'package:texterra/cubit/canvas_state.dart' as _i2;
import 'package:texterra/models/draw_model.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCanvasState_0 extends _i1.SmartFake implements _i2.CanvasState {
  _FakeCanvasState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CanvasCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCanvasCubit extends _i1.Mock implements _i3.CanvasCubit {
  MockCanvasCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CanvasState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCanvasState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.CanvasState);

  @override
  _i4.Stream<_i2.CanvasState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.CanvasState>.empty(),
      ) as _i4.Stream<_i2.CanvasState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void toggleTray() => super.noSuchMethod(
        Invocation.method(
          #toggleTray,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void selectText(int? index) => super.noSuchMethod(
        Invocation.method(
          #selectText,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleTextShadow(int? index) => super.noSuchMethod(
        Invocation.method(
          #toggleTextShadow,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeShadowColor(
    int? index,
    _i5.Color? color,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeShadowColor,
          [
            index,
            color,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeShadowBlur(
    int? index,
    double? blurRadius,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeShadowBlur,
          [
            index,
            blurRadius,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeShadowOffset(
    int? index,
    _i5.Offset? offset,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeShadowOffset,
          [
            index,
            offset,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void applyShadowPreset(
    int? index,
    _i3.ShadowPreset? preset,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #applyShadowPreset,
          [
            index,
            preset,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void fillCanvas(_i5.Color? fillColor) => super.noSuchMethod(
        Invocation.method(
          #fillCanvas,
          [fillColor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deselectText() => super.noSuchMethod(
        Invocation.method(
          #deselectText,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addText(String? text) => super.noSuchMethod(
        Invocation.method(
          #addText,
          [text],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleTextHighlight(
    int? index, {
    _i5.Color? highlightColor,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #toggleTextHighlight,
          [index],
          {#highlightColor: highlightColor},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeHighlightColor(
    int? index,
    _i5.Color? color,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeHighlightColor,
          [
            index,
            color,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetFormatting(int? index) => super.noSuchMethod(
        Invocation.method(
          #resetFormatting,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeTextColor(
    int? index,
    _i5.Color? color,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeTextColor,
          [
            index,
            color,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeBackgroundColor(_i5.Color? color) => super.noSuchMethod(
        Invocation.method(
          #changeBackgroundColor,
          [color],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> uploadBackgroundImage() => (super.noSuchMethod(
        Invocation.method(
          #uploadBackgroundImage,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> takePhotoForBackground() => (super.noSuchMethod(
        Invocation.method(
          #takePhotoForBackground,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void removeBackgroundImage() => super.noSuchMethod(
        Invocation.method(
          #removeBackgroundImage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void editText(
    int? index,
    String? newText,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #editText,
          [
            index,
            newText,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void moveText(
    int? index,
    double? x,
    double? y,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #moveText,
          [
            index,
            x,
            y,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void moveTextWithHistory(
    int? index,
    double? x,
    double? y,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #moveTextWithHistory,
          [
            index,
            x,
            y,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rotateText(
    int? index,
    double? rotation,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #rotateText,
          [
            index,
            rotation,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rotateTextWithHistory(
    int? index,
    double? rotation,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #rotateTextWithHistory,
          [
            index,
            rotation,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeFontSize(
    int? index,
    double? fontSize,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeFontSize,
          [
            index,
            fontSize,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeFontFamily(
    int? index,
    String? fontFamily,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeFontFamily,
          [
            index,
            fontFamily,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeFontStyle(
    int? index,
    _i5.FontStyle? fontStyle,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeFontStyle,
          [
            index,
            fontStyle,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeTextUnderline(
    int? index,
    bool? isUnderlined,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeTextUnderline,
          [
            index,
            isUnderlined,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeFontWeight(
    int? index,
    _i5.FontWeight? fontWeight,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeFontWeight,
          [
            index,
            fontWeight,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeTextAlignment(
    int? index,
    _i5.TextAlign? align,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeTextAlignment,
          [
            index,
            align,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void undo() => super.noSuchMethod(
        Invocation.method(
          #undo,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void redo() => super.noSuchMethod(
        Invocation.method(
          #redo,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearCanvas() => super.noSuchMethod(
        Invocation.method(
          #clearCanvas,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteText(int? index) => super.noSuchMethod(
        Invocation.method(
          #deleteText,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> savePage(
    String? pageName, {
    String? label,
    int? color,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePage,
          [pageName],
          {
            #label: label,
            #color: color,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> handleSaveAction() => (super.noSuchMethod(
        Invocation.method(
          #handleSaveAction,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> loadPage(String? pageName) => (super.noSuchMethod(
        Invocation.method(
          #loadPage,
          [pageName],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void createNewPage() => super.noSuchMethod(
        Invocation.method(
          #createNewPage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<String>> getSavedPages() => (super.noSuchMethod(
        Invocation.method(
          #getSavedPages,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> deletePage(String? pageName) => (super.noSuchMethod(
        Invocation.method(
          #deletePage,
          [pageName],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>?> getPagePreview(String? pageName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPagePreview,
          [pageName],
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<void> clearAllSavedData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllSavedData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void copyText(
    int? index,
    _i6.BuildContext? context,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #copyText,
          [
            index,
            context,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleDrawingMode() => super.noSuchMethod(
        Invocation.method(
          #toggleDrawingMode,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setDrawingMode(bool? isDrawing) => super.noSuchMethod(
        Invocation.method(
          #setDrawingMode,
          [isDrawing],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setDrawColor(_i5.Color? color) => super.noSuchMethod(
        Invocation.method(
          #setDrawColor,
          [color],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setStrokeWidth(double? width) => super.noSuchMethod(
        Invocation.method(
          #setStrokeWidth,
          [width],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setBrushType(_i7.BrushType? brushType) => super.noSuchMethod(
        Invocation.method(
          #setBrushType,
          [brushType],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startNewDrawPath(_i5.Offset? point) => super.noSuchMethod(
        Invocation.method(
          #startNewDrawPath,
          [point],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateDrawPath(_i5.Offset? point) => super.noSuchMethod(
        Invocation.method(
          #updateDrawPath,
          [point],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearDrawings() => super.noSuchMethod(
        Invocation.method(
          #clearDrawings,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void undoLastDrawing() => super.noSuchMethod(
        Invocation.method(
          #undoLastDrawing,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.CanvasState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i8.Change<_i2.CanvasState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
